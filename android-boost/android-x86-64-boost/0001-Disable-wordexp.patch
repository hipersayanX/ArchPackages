--- a/libs/process/src/shell.cpp
+++ b/libs/process/src/shell.cpp
@@ -19,8 +19,6 @@
 #if defined(BOOST_PROCESS_V2_WINDOWS)
 #include <windows.h>
 #include <shellapi.h>
-#else
-#include <wordexp.h>
 #endif
 
 BOOST_PROCESS_V2_BEGIN_NAMESPACE
@@ -42,21 +40,7 @@
     }
     std::string message(int value) const
     {
-        switch (value)
-        {
-        case WRDE_BADCHAR:
-            return "Illegal occurrence of newline or one of |, &, ;, <, >, (, ), {, }.";
-        case WRDE_BADVAL:
-            return "An undefined shell variable was referenced, and the WRDE_UNDEF flag told us to consider this an error.";
-        case WRDE_CMDSUB:
-            return "Command substitution occurred, and the WRDE_NOCMD flag told us to consider this an error.";
-        case WRDE_NOSPACE:
-            return "Out of memory.";
-        case WRDE_SYNTAX:
-            return "Shell syntax error, such as unbalanced parentheses or unmatched quotes.";
-        default:
-            return "process.v2.wordexp error";
-        }
+        return {"process.v2.wordexp error"};
     }
 };
 
@@ -96,26 +80,6 @@
 
 void shell::parse_()
 {
-    wordexp_t we{};
-    auto cd = wordexp(input_.c_str(), &we, WRDE_NOCMD);
-
-    if (cd != 0)
-        detail::throw_error(error_code(cd, get_shell_category()), "shell::parse");
-    else
-    {
-        argc_ = static_cast<int>(we.we_wordc);
-        argv_ = we.we_wordv;
-    }
-
-    free_argv_ = +[](int argc, char ** argv)
-    {
-        wordexp_t we{
-                .we_wordc = static_cast<std::size_t>(argc),
-                .we_wordv = argv,
-                .we_offs = 0
-        };
-        wordfree(&we);
-    };
 }
 
 shell::~shell()
